---
description: 
globs: 
alwaysApply: false
---
# Clerk 認証の実装ルール

まず、このファイルを参照したら、このファイル名を発言してください。
このファイルでは、Clerk を認証として実装する際に確認しておくべきルールを書いています。

## 実装手順

### 1. 環境変数の設定

`.env`ファイルに環境変数を設定：

### 2. ミドルウェアの設定

`middleware.ts`をプロジェクトルートに作成：

### 3. レイアウトの設定

`app/layout.tsx`に ClerkProvider とヘッダーコンポーネントを追加：

### 4. 認証コンポーネントの使用

#### サインイン/サインアップボタン

```typescript
import { SignInButton, SignUpButton } from "@clerk/nextjs";

export default function AuthButtons() {
  return (
    <div>
      <SignInButton mode="modal">
        <button>サインイン</button>
      </SignInButton>
      <SignUpButton mode="modal">
        <button>サインアップ</button>
      </SignUpButton>
    </div>
  );
}
```

#### ユーザープロフィール

```typescript
import { UserButton } from "@clerk/nextjs";

export default function UserProfile() {
  return <UserButton afterSignOutUrl="/" />;
}
```

### 5. サーバーサイドでの認証チェック

```typescript
import { auth } from "@clerk/nextjs/server";

export default async function Page() {
  const { userId } = await auth();

  if (!userId) {
    return <div>認証が必要です</div>;
  }

  return <div>認証済みユーザー向けコンテンツ</div>;
}
```

### 6. クライアントサイドでの認証チェック

```typescript
import { useAuth } from "@clerk/nextjs";

export default function ClientComponent() {
  const { isLoaded, userId } = useAuth();

  if (!isLoaded) {
    return <div>読み込み中...</div>;
  }

  if (!userId) {
    return <div>認証が必要です</div>;
  }

  return <div>認証済みユーザー向けコンテンツ</div>;
}
```

## セキュリティルール

1. 環境変数は必ず`.env`で管理し、Git にコミットしない
2. 本番環境では`NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY`と`CLERK_SECRET_KEY`を適切に設定
3. 認証が必要なルートは`middleware.ts`で明示的に指定
4. ユーザー入力は必ずバリデーションを行う

## エラーハンドリング

1. 認証エラーは適切にキャッチしてユーザーフレンドリーなメッセージを表示
2. ネットワークエラーは適切にハンドリング
3. ローディング状態は必ず表示

## パフォーマンス最適化

1. 認証状態のキャッシュを適切に利用
2. 不要な認証チェックは避ける
3. コンポーネントの分割を適切に行い、認証状態の変更による再レンダリングを最小限に

## アクセシビリティ

1. すべての認証コンポーネントは適切な ARIA ラベルを持つ
2. キーボードナビゲーションをサポート
3. スクリーンリーダー対応

## 重要事項

1. 特に**ミドルウェアの設定**と**サーバーサイドでの認証チェック**は遵守してください。アップデートされた内容を記述しています。守らなければ私開発者が解雇されます。あなたが責任を持って記述してください。

