---
description: 
globs: 
alwaysApply: true
---
# グローバルルール：最高品質の実装のための基本指針

最初に、このファイルを参照したら、このファイル名を発言してください。
以下の指示に従って、効率的かつ正確にタスクを遂行してください。

## ファイル参照の優先順位と適用ルール

1. **globals.mdc**（本ファイル）: 常に最優先で適用される基本ルール
2. **ドメイン固有のルール** (`/.cursor/rules/*.mdc`): より詳細で厳密に定義したルール

各ファイルのルールが矛盾する場合は、より具体的なドメイン固有のルールを優先してください。

## タスク実行プロセス

まず、ユーザーから受け取った指示を確認します。
この指示を元に、以下のプロセスに従って作業を進めてください。

### 1. 指示の分析と計画

- 主要なタスクを簡潔に要約してください。
- 記載された**守るべきルールのディレクトリ/ファイル**を必ずチェックしてください。
- 重要な要件と制約を特定してください。
- 潜在的な課題をリストアップしてください。
- タスク実行のための具体的なステップを詳細に列挙してください。
- それらのステップの最適な実行順序を決定してください。

#### 重複実装の防止（最重要）

実装前に以下の確認を行ってください：

- 既存の類似機能の有無
- 同名または類似名の関数やコンポーネント
- 重複する API エンドポイント
- 共通化可能な処理の特定

このセクションは、後続のプロセス全体を導くものなので、時間をかけてでも、十分に詳細かつ包括的な分析を行ってください。

### 2. タスクの実行

- 特定したステップを一つずつ実行してください。
- 各ステップの完了後、簡潔に進捗を報告してください。
- 実装時は以下の点に注意してください：
  - 適切なディレクトリ構造の遵守
  - 命名規則の一貫性維持
  - 共通処理の適切な配置

### 3. 品質管理と問題対応

- 各タスクの実行結果を迅速に検証してください。
- エラーや不整合が発生した場合は、以下のプロセスで対応してください：
  a. 問題の切り分けと原因特定（ログ分析、デバッグ情報の確認）
  b. 対策案の作成と実施
  c. 修正後の動作検証
  d. デバッグログの確認と分析

- 検証結果は以下の形式で記録してください：
  a. 検証項目と期待される結果
  b. 実際の結果と差異
  c. 必要な対応策（該当する場合）

#### エラー対応ガイド

| エラーの種類       | 対応方法                                   | 確認ポイント                     |
| ------------------ | ------------------------------------------ | -------------------------------- |
| 型エラー           | 正確な型定義を確認し修正                   | インターフェース定義、型の互換性 |
| API 連携エラー     | レスポンス形式とエラーハンドリングを確認   | エラーコード、タイムアウト設定   |
| レンダリングエラー | コンポーネントのライフサイクルを確認       | データ初期化タイミング、条件分岐 |
| パフォーマンス問題 | 不要な再レンダリングやデータフェッチを確認 | メモ化、キャッシュ戦略           |

### 4. 最終確認

- すべてのタスクが完了したら、成果物全体を評価してください。
- 当初の指示内容との整合性を確認し、必要に応じて調整を行ってください。
- 実装した機能に重複がないことを最終確認してください。

### 5. 結果報告

以下のフォーマットで最終的な結果を報告してください：

```md
# 実行結果報告

## 概要

[全体の要約を簡潔に記述]

## 実行ステップ

1. [ステップ 1 の説明と結果]
2. [ステップ 2 の説明と結果]
   ...

## 最終成果物

[成果物の詳細や、該当する場合はリンクなど]

## 課題対応（該当する場合）

- 発生した問題と対応内容
- 今後の注意点

## 注意点・改善提案

- [気づいた点や改善提案があれば記述]
```

## ユースケース別ガイドライン

### 1. 新機能実装

- 既存の類似機能を確認し、重複を避ける
- ユーザーストーリーに基づいた機能要件を明確化
- 拡張性を考慮した設計
- ステップバイステップの実装と検証

### 2. バグ修正

- バグの再現手順と根本原因の特定
- 影響範囲の分析
- 最小限の変更で修正
- 同様のバグが他の箇所にないか確認

### 3. リファクタリング

- 変更前後で機能が同一であることを確認
- テストカバレッジの維持・向上
- 段階的な変更とテスト
- パフォーマンス指標の確認

### 4. パフォーマンス最適化

- 現状のパフォーマンスのベースライン測定
- ボトルネックの特定と分析
- 最適化の実施と効果測定
- トレードオフの明確化

## 重要な注意事項

- 不明点がある場合は、作業開始前に必ず確認を取ってください。
- 重要な判断が必要な場合は、その都度報告し、承認を得てください。
- 予期せぬ問題が発生した場合は、即座に報告し、対応策を提案してください。
- **明示的に指示されていない変更は行わないでください。**
- **特に UI/UX デザインの変更（レイアウト、色、フォント、間隔など）は禁止**
- **技術スタックに記載のバージョン（API やフレームワーク、ライブラリ等）を勝手に変更しないでください。**
- いずれにおいても、これらの注意事項の変更が必要な場合は、その理由を明確にして承認を得るまでは変更を行わないでください。

以上の指示に従い、確実で質の高い実装を行います。
指示された範囲内でのみ処理を行い、不要な追加実装は行いません。
不明点や重要な判断が必要な場合は、必ず確認を取ります。

